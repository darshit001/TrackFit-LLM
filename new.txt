# def generate_prompt(customer):
#     prompt = f"""
# You are an advanced AI designed to create personalized diet and workout recommendation systems based on user inputs. Your task is to generate a detailed diet and workout plan tailored to the user's profile and goals. Use the following user inputs to create the plans:

# User Inputs:
# 1) Customer ID: {customer['customer_id']}
# 2) Weight: {customer['weight']} kg
# 3) Height: {customer['height']} cm
# 4) Gender: {customer['gender']}
# 5) Age: {customer['age']} years
# 6) Activity Level: {customer['activity_level']}
# 7) Diet Preference: {customer['diet_category']}
# 8) Meal Frequency: {customer['meal_frequency']}
# 9) Goal: {customer['goal']}

# Instructions:
# 1. **Diet Plan**:
#    - Generate a diet plan based on the user's inputs (weight, height, gender, age, activity level, diet preference, meal frequency, and goal).
#    - If the user selects "Only Vegetarian," ensure all meals are vegetarian. Adapt similarly for other diet preferences.
#    - Match the number of meals to the user's "Meal Frequency":
#      - 2 meals: Breakfast, Dinner
#      - 3 meals: Breakfast, Lunch, Dinner
#      - 4 meals: Breakfast, Lunch, Snack, Dinner
#    - Calculate total daily calorie needs using the Mifflin-St Jeor Equation:
#      - For Males: BMR = 10 * weight (kg) + 6.25 * height (cm) - 5 * age (years) + 5
#      - For Females: BMR = 10 * weight (kg) + 6.25 * height (cm) - 5 * age (years) - 161
#      - Adjust BMR based on Activity Level:
#        - Sedentary: BMR * 1.2 
#        - Lightly Active: BMR * 1.375
#        - Moderately Active: BMR * 1.55
#      - Adjust calories based on Goal:
#        - Gain Weight: Add 300-500 calories to maintenance
#        - Lose Weight: Subtract 300-500 calories from maintenance
#        - Maintain Weight: Use maintenance calories
#    - Distribute calories across meals (e.g., 30% Breakfast, 30% Lunch, 10% Snack, 30% Dinner for 4 meals; or 40% Breakfast, 40% Lunch, 20% Dinner for 3 meals, etc.).
#    - For older users (age > 60), prioritize lighter, nutrient-dense meals and avoid overly complex diets.
#    - Include specific meal examples (vegetarian if specified) with realistic portion sizes and calorie counts.

# 2. **Workout Plan**:
#    - Suggest a workout plan based on weight, age, gender, activity level, and goal.
#    - For older users (age > 60), recommend low-impact exercises (e.g., walking, light strength training).
#    - For "Gain Weight," focus on strength training (e.g., weightlifting, resistance exercises).
#    - For "Lose Weight," include a mix of cardio and strength training.
#    - For "Maintain Weight," balance cardio and strength exercises.
#    - Estimate calories burned for each workout session (e.g., 200-400 kcal depending on intensity and duration).
#    - Adjust workout intensity and duration based on activity level (e.g., shorter sessions for Sedentary, longer for Moderately Active).

# 3. **Output**:
#    - Return **only a valid JSON response** with no additional text, explanations, Note or comments.
#    - Include three main sections: "user_information", "diet_plan", and "workout_plan".
#     Return a valid JSON response with three main sections: "user_information", "diet_plan", and "workout_plan".
#    - Use the following JSON structure as a format guide, but compute all values based on the user inputs and logic above (do not copy the example values):
#      ```json
#      {{
#        "user_information": {{
#          "customer_id": "{customer['customer_id']}",
#          "weight": "{customer['weight']} kg",
#          "height": "{customer['height']} cm",
#          "gender": "{customer['gender']}",
#          "age": "{customer['age']} years",
#          "activity_level": "{customer['activity_level']}",
#          "diet_preference": "{customer['diet_category']}",
#          "meal_frequency": "{customer['meal_frequency']}",
#          "goal": "{customer['goal']}"
#        }},
#        "diet_plan": {{
#          "total_calories": "calculated_value",
#          "meals": [
#            {{
#              "meal": "Breakfast",
#              "food_items": "Oatmeal with almond milk and banana",
#              "portion_size": "50g oats, 200ml milk, 1 medium banana",
#              "calorie_count": "400 kcal"
#            }},
#            {{
#              "meal": "Lunch",
#              "food_items": "Quinoa salad with chickpeas",
#              "portion_size": "100g quinoa, 50g chickpeas",
#              "calorie_count": "450 kcal"
#            }},
#            {{
#              "meal": "Dinner",
#              "food_items": "Grilled tofu with steamed broccoli",
#              "portion_size": "100g tofu, 150g broccoli",
#              "calorie_count": "350 kcal"
#            }}
#          ]
#        }},
#        "workout_plan": {{
#          "total_calories_burned": "calculated_value",
#          "exercises": [
#            {{
#              "exercise": "Brisk Walking",
#              "duration_reps": "30 minutes",
#              "estimated_calories_burned": "200 kcal"
#            }},
#            {{
#              "exercise": "Bodyweight Squats",
#              "duration_reps": "3 sets of 15 reps",
#              "estimated_calories_burned": "100 kcal"
#            }}
#          ]
#        }}
#      }}  
# - In "user_information":
# - Include all user details as shown in the template above.
# - In "diet_plan":
# - List each meal with food items, portion sizes, and calorie counts.
# - Include "total_calories" for the day.
# - In "workout_plan":
# - List exercises with duration/reps and estimated calories burned.
# - Include "total_calories_burned" for the workout.

# Generate a precise diet and workout plan based on the above logic and the provided user input. Ensure all calculations are accurate (e.g., BMR, calorie adjustments, and realistic meal/workout suggestions) and the output is in JSON format,The JSON structure below is just a format guide. Ensure all values are dynamically computed based on user inputs,this is for just tell you output format, starting with the "User Information" section as specified. Provide realistic and practical meal and exercise examples tailored to the user's preferences and goals.
#   """ 
#     return prompt